package com.sloader
{
	import com.sloader.commin.SLoaderEventType;
	import com.sloader.commin.SLoaderFileType;
	import com.sloader.commin.SLoaderFileVO;
	import com.sloader.commin.SLoaderFilesLoaderInfo;
	import com.sloader.loadhandler.ILoadHandler;
	import com.sloader.loadhandler.SWF_LoadHandler;
	
	import flash.system.SecurityDomain;
	import flash.utils.Dictionary;

	public class SLoader
	{
		private var _domain:SecurityDomain;
		private var _loadHandlers:Array;
		private var _eventHandlers:Dictionary;
		private var _filesLoad:Array;
		private var _files:Array;
		private var _filesLoadInfo:SLoaderFilesLoaderInfo;
		private var _isLoading:Boolean = false;
		
		public function SLoader(domain:SecurityDomain)
		{
			_domain = domain;
			_eventHandlers = new Dictionary();
			_loadHandlers = [];
			_filesLoad = [];
			_files = [];
			_filesLoadInfo = new SLoaderFilesLoaderInfo();
			
			registerLoadHandler();
			registerEventHandler();
		}
		
		private function registerLoadHandler():void
		{
			_loadHandlers[SLoaderFileType.SWF.toLowerCase()] = SWF_LoadHandler;
		}
		
		private function registerEventHandler():void
		{
			_eventHandlers[SLoaderEventType.FILE_COMPLETE] = [];
			_eventHandlers[SLoaderEventType.FILE_ERROR] =  [];
			_eventHandlers[SLoaderEventType.FILE_PROGRESS] = [];
			_eventHandlers[SLoaderEventType.FILE_START] = [];
			_eventHandlers[SLoaderEventType.FILES_COMPLETE] = [];
			_eventHandlers[SLoaderEventType.FILES_PROGRESS] = [];
			_eventHandlers[SLoaderEventType.FILES_START] = [];
		}
		
		///////////////////////////////////////////////////////////////////////////
		// loadListManage
		///////////////////////////////////////////////////////////////////////////
		public function addFile(file:SLoaderFileVO):void
		{
			checkIsLoading();

			for (var i:int=0; i<_filesLoad.length; i++)
			{
				if ((_filesLoad[i] as SLoaderFileVO).title == file.title)
					throw new Error("Duplication of add file(title:"+file.title+")");
			}

			_filesLoad.push(file);
			_files.push(file);
		}
		
		public function addFiles(files:Array):void
		{
			checkIsLoading();
			
			for (var i:int=0; i<files.length; i++)
			{
				var file:SLoaderFileVO = files[files.length-i];
				_files.push();
			}
		}
		
		public function removeFile(file:SLoaderFileVO):void
		{
			checkIsLoading();
			
			var index:int = _filesLoad.indexOf(file);
			if (index != -1)
				_filesLoad.splice(index, 1);
			
			index = _files.indexOf(file);
			if (index != -1)
				_files.splice(index, 1);
		}
		
		public function execute():void
		{
			checkIsLoading();
			_execute();
		}
		
		private function _execute():void
		{
			var file:SLoaderFileVO = _filesLoad[0];
			var fileType:String = getFileType(file).toLowerCase();
			var fileLoadHandlerClass:Class = _loadHandlers[fileType];
			if (!fileLoadHandlerClass)
			{
				throw new Error("you not registered handler on ["+fileType+"]");
			}
			else
			{
				_isLoading = true;
				var fileLoadHandler:ILoadHandler = new fileLoadHandlerClass(file);
				fileLoadHandler.setFileCompleteEventHandler(onFileComplete);
				fileLoadHandler.setFileProgressEventHandler(onFileProgress);
				fileLoadHandler.setFileStartEventHandler(onFileStart);
				fileLoadHandler.load();
			}
		}		
		
		///////////////////////////////////////////////////////////////////////////
		// eventManage
		///////////////////////////////////////////////////////////////////////////
		public function addEventListener(type:String, handler:Function):void
		{
			if (!_eventHandlers[type])
				throw new Error("event name["+type+"] is Invalid");
			
			(_eventHandlers[type] as Array).push(handler);
		}
		
		public function removeEventListener(type:String, handler:Function):void
		{
			if (!_eventHandlers[type])
				return;
			
			var index:int = (_eventHandlers[type] as Array).indexOf(handler);
			if (index != -1)
				(_eventHandlers[type] as Array).splice(index, 1);
		}
		
		private function onFileStart(file:SLoaderFileVO):void
		{
			executeHandlers(_eventHandlers[SLoaderEventType.FILE_START], file);
			if (_files.length == _filesLoad.length)
				onFilesStart();
		}
		
		private function onFileProgress(file:SLoaderFileVO):void
		{
			executeHandlers(_eventHandlers[SLoaderEventType.FILE_PROGRESS], file);
			onFilesProgress();
		}
		
		private function onFileComplete(file:SLoaderFileVO):void
		{
			executeHandlers(_eventHandlers[SLoaderEventType.FILE_COMPLETE], file);
			
			var index:int = _filesLoad.indexOf(file);
			if (index != -1)
				_filesLoad.splice(index, 1);
			
			if (_filesLoad.length > 0)
				_execute();
			else
				onFilesComplete();
		}
		
		private function onFilesStart():void
		{
			updateFilesPro();
			executeHandlers(_eventHandlers[SLoaderEventType.FILES_START], _filesLoadInfo);
		}
		
		private function onFilesProgress():void
		{
			updateFilesPro();
			executeHandlers(_eventHandlers[SLoaderEventType.FILES_PROGRESS], _filesLoadInfo);
		}
		
		private function onFilesComplete():void
		{
			_isLoading = false;
			updateFilesPro();
			executeHandlers(_eventHandlers[SLoaderEventType.FILES_COMPLETE], _filesLoadInfo);
		}
		
		private function executeHandlers(handlers:Array, file:*):void
		{
			for (var i:int=0; i<handlers.length; i++)
			{
				var handler:Function = handlers[i];
				handler(file);
			}
		}
		
		private function updateFilesPro():void
		{
			_filesLoadInfo.doneFileCount = _files.length - _filesLoad.length;
			_filesLoadInfo.totalFileCount = _files.length;
			_filesLoadInfo.doneBytes = 0;
			_filesLoadInfo.totalBytes = 0;
		}  
		
		///////////////////////////////////////////////////////////////////////////
		//-------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////
		private function getFileType(file:SLoaderFileVO):String
		{
			if (file.type)
			{
				return file.type;
			}
			else
			{
				return "swF";
			}
		}
		
		private function checkIsLoading():void
		{
			if (_isLoading)
				throw new Error("Refused the operation, is loaded in");
		}
	}
}