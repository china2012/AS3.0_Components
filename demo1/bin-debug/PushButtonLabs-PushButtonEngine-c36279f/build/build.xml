<!-- 

Welcome to the PushButton Engine Ant build file.

If you are building your own application you probably just need the SWC
or else you need to copy the src/ folder's contents into your project.

If you are a more advanced user or a PBEngine SDK developer, then this file
will be of interest to you. :)

This file is based on the PaperVision3D Ant build file, subsequently modified
to fit PBEngine.

How to use the build.properties file:

Your checkout should include a build.template.properties file. This is where
variables that change from system to system are stored. Simply rename the file
to build.properties and place it in the same directory as your build.xml. When 
you run the build.xml it will automatically import the build.properties file.

Make sure you change the path of the Flex SDK and if you are on a PC you will need
to add ".exe" to the asdoc.exe and compc.exe properties.

NOTE: There is a bug with the 3.4.0 SDK that ships with the Flash Builder 4 Beta.
Basically ASDoc doesn't work in our situation. Use the release version of the SDK 
or the 4.0 version and the build will work.
http://bugs.adobe.com/jira/browse/SDK-20449

-->
<project name="PBEngineSDK" default="compile" basedir=".">
    <dirname property="buildFilesDir" file="${ant.file.PBEngineSDK}" />
    <dirname property="rootDir" file="${buildFilesDir}" />

    <!-- import our build properties file -->
    <property file="${buildFilesDir}/build.properties" />

    <!-- Build settings -->
    <property name="DEBUG" value="true"/>

    <!-- Docs appearance settings. -->
    <property name="windowtitle" value="PushButton API Reference" />
    <property name="maintitle" value="PushButton API Reference" />
    <property name="footer" value="http://pushbuttonengine.com/" />

    <!-- Paths for the PBEngine SDK. -->
    <property name="binDir" value="${rootDir}/bin" />
    <property name="classesDir" value="${rootDir}/src" />
    <property name="docsDir" value="${rootDir}/docs/api" />
    <property name="downloadsDir" value="${rootDir}/docs/downloads" />
    <property name="testsDir" value="${rootDir}/test" />
    <property name="testRunDir" value="${buildFilesDir}/testrun"></property>
    <property name="lessonsDir" value="${rootDir}/lessons" />

    <!-- Infer the binary extensions. -->
    <condition property="binaryExtension" value=".exe" else="">
        <or>
            <os family="windows"/>
            <os family="win9x"/>
            <os family="dos"/>
        </or>
    </condition>

    <!-- Paths for the Flex SDK. -->
    <property name="flexbindir" value="${flexdir}/bin" />
    <property name="flexlibsdir" value="${flexdir}/frameworks/libs" />
    <property name="asdoc" value="${flexbindir}/asdoc${binaryExtension}" />
    <property name="compc" value="${flexbindir}/compc${binaryExtension}" />
    <property name="mxmlc" value="${flexbindir}/mxmlc${binaryExtension}" />
    <property name="adl" value="${flexbindir}/adl${binaryExtension}" />

    <property environment="env" />    


    <!-- Local classpath useed for custom tasks -->
    <path id="localClasspath">
        <fileset dir="${buildFilesDir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <target name="get-git-details" >
        <exec executable="git" outputproperty="git.revision.long">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="git.revision.short">
            <arg value="rev-parse"/>
            <arg value="--short"/>
            <arg value="HEAD"/>
        </exec>

        <echo>Git Details -- ${git.revision.long} (${git.revision.short})</echo>
    </target>

    <target name="ensureValidEnvironment">
        <condition property="buildPropertiesIsValid">
            <or>
                <available file="${buildFilesDir}/build.properties"/>
                <!-- We -DbuildSystem=1 if we are doing an automated build -->
                <isset property="buildSystem"/>
            </or>
        </condition>
        <fail unless="buildPropertiesIsValid">
            No ${buildFilesDir}/build.properties file is present!

            Copy build/build.template.properties to build/build.properties and
            set the values in it appropriate to your build environment.
        </fail>
        <condition property="skipTesting">
            <!-- We -DskipTests=1 if we are doing an automated build -->
            <isset property="skipTests"/>
        </condition>
        <condition property="flexSdkIsValid"> 
            <and> 
                <isset property="flexdir"/> 
                <available file="${flexdir}"/> 
            </and> 
        </condition>
        <fail unless="flexSdkIsValid">Either flexdir is not set, or it points to an absent directory.

            flexdir appears to be set to: '${flexdir}'

            Set the flexdir parameter by editing the build.properties file.
        </fail>
    </target>

    <target name="checkBuildServer" depends="get-git-details" description="Checks if this is the build server">
        <condition property="isBuildServer" value="false">
            <and>
                <isset property="git.revision.short"/>
                <isset property="env.BUILD_NUMBER"/>
            </and>
        </condition>
    </target>

    <target name="populateBuildVersion" description="Creates an updated BuildVersion.as" 
        depends="checkBuildServer" if="isBuildServer">

        <echo>Revision Number: ${git.revision.short}</echo>
        <echo>Build Number: ${env.BUILD_NUMBER}</echo>

        <copy file="${classesDir}/com/pblabs/engine/version/BuildVersion.as.templ"
            tofile="${classesDir}/com/pblabs/engine/version/BuildVersion.as" overwrite="true" />

        <replace file="${classesDir}/com/pblabs/engine/version/BuildVersion.as"
            token="@buildNumber@" value="ZaaBuild #${env.BUILD_NUMBER} (${git.revision.short})" />
    </target>

    <target name="compile" description="Creates SWC and API docs." unless="isUpToDate" depends="printUpToDate,ensureValidEnvironment">
        <antcall target="generateSWC" />
        <antcall target="generateDocs" />
    </target>

    <target name="clean" description="Delete build artifacts." depends="cleanDocs,cleanLessons">
        <delete file="${binDir}/PBEngine.swc"/>
        <delete includeemptydirs="false" quiet="false" failonerror="false">
          <fileset dir="${rootDir}" includes="PushButtonEngine-*.zip"/>
          <fileset dir="${rootDir}/build/testrun/" />
        </delete>
    </target>

    <target name="cleanLessons" description="Clean the documentation directory.">
        <echo>Cleaning out lessons...</echo>
        <delete includeemptydirs="true" quiet="false" failonerror="false">
          <fileset dir="${lessonsDir}" includes="*/bin/*"></fileset>
        </delete>
    </target>

    <target name="identifyClasses" description="Generates list of classes that will be compiled." depends="ensureValidEnvironment">
        <path id="path.source">
            <fileset dir="${classesDir}" includes="**/*.as,**/*.mxml"/>
        </path>
        <pathconvert property="path.classes" refid="path.source" pathsep=" ">
            <chainedmapper>
                <globmapper from="${classesDir}/*" to="*" casesensitive="false" handledirsep="true"/>
                <mapper type="regexp" from="^com[/\\]pblabs(.*)\.((mxml)|(as))" to="com\\pblabs\1"/>
                <mapper type="package" from="*" to="*"/>
            </chainedmapper>
        </pathconvert>
    </target>

    <target name="cleanDocs" description="Clean the documentation directory.">
        <echo>Cleaning out docs from '${docsDir}'...</echo>
        <delete includeemptydirs="true" quiet="false" failonerror="false">
            <fileset dir="${docsDir}" includes="**/*"></fileset>
        </delete>
        <delete includeemptydirs="true" quiet="false" failonerror="false">
          <fileset dir="${downloadsDir}" includes="*"></fileset>
        </delete>
    </target>

    <target name="generateDocs" description="Generates docs" depends="cleanDocs,identifyClasses">
        <echo>Generating documentation for '${docsDir}'...</echo>

        <echo>-source-path: ${classesDir}</echo>
        <echo>-output: ${docsDir}</echo>

        <exec executable="${asdoc}" failonerror="true">
            <arg line="-source-path '${classesDir}'" />
            <arg line="-doc-sources '${classesDir}'" />
            <arg line="-window-title '${windowtitle}'" />
            <arg line="-main-title '${maintitle}'" />
            <arg line="-footer '${footer}'" />
            <arg line="-output '${docsDir}'" />
            <arg line="-lenient" />
        </exec>
    </target>

    <target name="checkSWCUpToDate" depends="ensureValidEnvironment">
        <uptodate property="isUpToDate" targetfile="${binDir}/PBEngine.swc">
            <srcfiles dir="${classesDir}">
                <include name="**/*.as"/>
                <include name="**/*.mxml"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="printUpToDate" depends="checkSWCUpToDate" if="isUpToDate">
        <echo>PBEngine.swc is up to date, skipping.</echo>
    </target>

    <target name="generateSWC" description="Generates PBEngine SWC." unless="isUpToDate" depends="populateBuildVersion,printUpToDate,identifyClasses">
        <echo>Generating PBEngine.SWC using '${classesDir}'</echo>
        <exec executable="${compc}" failonerror="true">
            <arg line="-source-path &quot;${classesDir}&quot;" />
            <arg line="-output &quot;${binDir}/PBEngine.swc&quot;" />
            <arg line="-include-classes ${path.classes}" />
            <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed,ResourceType" />
            <arg line="-target-player=10.0" />
            <arg line="-debug=${DEBUG}"/>
        </exec>
    </target>

    <target name="lessons" depends="compile" description="Compile all the lessons.">
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${lessonsDir}/Lesson2Base" />
            <param name="currentProjectName" value="Lesson2Base" />
            <param name="currentProjectRootFile" value="Lesson2Base.as"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${lessonsDir}/Lesson2Final" />
            <param name="currentProjectName" value="Lesson2Final" />
            <param name="currentProjectRootFile" value="Lesson2Final.as"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${lessonsDir}/Lesson3Base" />
            <param name="currentProjectName" value="Lesson3Base" />
            <param name="currentProjectRootFile" value="Lesson3Base.as"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${lessonsDir}/Lesson3Final" />
            <param name="currentProjectName" value="Lesson3Final" />
            <param name="currentProjectRootFile" value="Lesson3Final.as"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${lessonsDir}/Lesson4Base" />
            <param name="currentProjectName" value="Lesson4Base" />
            <param name="currentProjectRootFile" value="Lesson4Base.as"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${lessonsDir}/Lesson4Final" />
            <param name="currentProjectName" value="Lesson4Final" />
            <param name="currentProjectRootFile" value="Lesson4Final.as"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${lessonsDir}/Lesson5Base" />
            <param name="currentProjectName" value="Lesson5Base" />
            <param name="currentProjectRootFile" value="Lesson5Base.as"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${lessonsDir}/Lesson5Final" />
            <param name="currentProjectName" value="Lesson5Final" />
            <param name="currentProjectRootFile" value="Lesson5Final.as"/>
        </antcall>
    </target>

    <target name="examples" depends="compile" description="Compile all the examples.">
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${rootDir}/examples/PBEngineDemo" />
            <param name="currentProjectName" value="PBEngineDemo" />
            <param name="currentProjectRootFile" value="PBEngineDemo.mxml"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${rootDir}/examples/PBFlexlessEngineDemo" />
            <param name="currentProjectName" value="PBFlexlessEngineDemo" />
            <param name="currentProjectRootFile" value="PBFlexlessEngineDemo.as"/>
        </antcall>
        <antcall target="buildSWF">
            <param name="currentProjectRootDir" value="${rootDir}/examples/RollyBallGame" />
            <param name="currentProjectName" value="RollyBallGame" />
            <param name="currentProjectRootFile" value="RollyBallGame.as"/>
        </antcall>
    </target>

    <target name="doLessonsPackagedBuild" description="Build a packaged ZIP of each lesson, ready for distribution." depends="clean,compile,lessons">

        <!-- Build everything from scratch - dependencies do this. -->

        <mkdir dir="${downloadsDir}"/>
        
        <!-- Package it all into a zip into the docs directory. -->
        <delete  file="${downloadsDir}/Lesson1FlashDevelop.zip" quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson1FlashDevelop.zip" basedir="${lessonsDir}/Lesson1FlashDevelop"/>
        <delete  file="${downloadsDir}/Lesson1FlashCS4.zip"     quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson1FlashCS4.zip"     basedir="${lessonsDir}/Lesson1FlashCS4"/>
        <delete  file="${downloadsDir}/Lesson1FlexBuilder.zip"  quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson1FlexBuilder.zip"  basedir="${lessonsDir}/Lesson1FlexBuilder"/>

        <delete  file="${downloadsDir}/Lesson2Base.zip"  quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson2Base.zip"  basedir="${lessonsDir}/Lesson2Base"/>
        <delete  file="${downloadsDir}/Lesson2Final.zip" quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson2Final.zip" basedir="${lessonsDir}/Lesson2Final"/>

        <delete  file="${downloadsDir}/Lesson3Base.zip"  quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson3Base.zip"  basedir="${lessonsDir}/Lesson3Base"/>
        <delete  file="${downloadsDir}/Lesson3Final.zip" quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson3Final.zip" basedir="${lessonsDir}/Lesson3Final"/>

        <delete  file="${downloadsDir}/Lesson4Base.zip"  quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson4Base.zip"  basedir="${lessonsDir}/Lesson4Base"/>
        <delete  file="${downloadsDir}/Lesson4Final.zip" quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson4Final.zip" basedir="${lessonsDir}/Lesson4Final"/>

        <delete  file="${downloadsDir}/Lesson5Base.zip"  quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson5Base.zip"  basedir="${lessonsDir}/Lesson5Base"/>
        <delete  file="${downloadsDir}/Lesson5Final.zip" quiet="false"/>
        <zip destfile="${downloadsDir}/Lesson5Final.zip" basedir="${lessonsDir}/Lesson5Final"/>

        <!-- Copy final versions of the lessons to the docs directory -->
        <copy file="${lessonsDir}/Lesson2Final/bin/Lesson2Final.swf" tofile="${downloadsDir}/Lesson2Final.swf" failOnError="true" overwrite="true" />
        <copy file="${lessonsDir}/Lesson3Final/bin/Lesson3Final.swf" tofile="${downloadsDir}/Lesson3Final.swf" failOnError="true" overwrite="true" />
        <copy file="${lessonsDir}/Lesson4Final/bin/Lesson4Final.swf" tofile="${downloadsDir}/Lesson4Final.swf" failOnError="true" overwrite="true" />
        <copy file="${lessonsDir}/Lesson5Final/bin/Lesson5Final.swf" tofile="${downloadsDir}/Lesson5Final.swf" failOnError="true" overwrite="true" />
    </target>

    <target name="doFullPackagedBuild" description="Build a packaged ZIP of the whole SDK, ready for distribution." depends="clean,test,compile,doLessonsPackagedBuild,examples">
        <!-- Build everything from scratch - dependencies do this. -->

        <!-- Package it all into a zip with appropriate name. -->
        <delete file="${rootDir}/PushButtonEngine-b${env.BUILD_NUMBER}.zip" quiet="false"/>
        <zip destfile="${rootDir}/PushButtonEngine-b${env.BUILD_NUMBER}.zip" basedir="${rootDir}" excludes="**/.git,PushButtonEngine-b*.zip,build/build.properties,*/build/testrun*,builds"/>
    </target>

    <target name="buildSWF" description="Build a SWF for a project given a few properties. Used by per-project Ant files.">
        <!--
        We expect a few properties.

        currentProject.rootDir - root directory (like examples/PBEngineDemo).
        currentProject.name    - name of current project.
        currentProject.rootFile - .as or .mxml file that is entry point.
        -->
        <echo>Building ${currentProjectName} in ${currentProjectRootDir} from ${currentProjectRootFile}</echo>
        <exec executable="${mxmlc}" failonerror="true">
            <arg line="-source-path+=&quot;${currentProjectRootDir}/src&quot; " />
            <arg line="-library-path+=&quot;${buildFilesDir}/../bin&quot;" />
            <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed" />
            <arg line="-compiler.optimize=true -use-network=false" />
            <arg line="-output &quot;${currentProjectRootDir}/bin/${currentProjectName}.swf&quot;" />
            <arg line="&quot;${currentProjectRootDir}/src/${currentProjectRootFile}&quot;" />
            <arg line="-debug=${DEBUG}"/>
        </exec>
    </target>

    <target name="test" description="Builds and runs the unit tests defined in the test directory." depends="generateSWC" unless="skipTesting">
        <condition property="airVersionIsSet">
            <isset property="airversion"/>
        </condition>
        <fail unless="airVersionIsSet">
            The airversion property is not set in the build.properties file.

            Set it to the AIR version you'd put in your application descriptor file.

            See the build.template.properties file for more information.
        </fail>

        <!-- 
        TODO: No need to build this every time if it's up to date, 
        and we need to do validity checking to make sure the environment is correct 
        -->

        <!-- Build the tests as an AIR app. -->
        <mkdir dir="${testRunDir}"></mkdir>
        <exec executable="${mxmlc}" failonerror="true">
            <arg line="-source-path+=&quot;${testsDir}/src&quot; " />
            <arg line="-library-path+=&quot;${buildFilesDir}/../bin&quot;" />
            <arg line="-library-path+=&quot;${testsDir}/libs&quot;" />
            <arg line="+configname=air" />
            <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed,ResourceType" />
            <arg line="-compiler.optimize=true -use-network=false" />
            <arg line="-output &quot;${testRunDir}/pbetests.swf&quot;" />
            <arg line="&quot;${testsDir}/src/TestRunner.mxml&quot;" />
            <arg line="-debug=${DEBUG}"/>
        </exec>

        <echo />
        <echo />
        <echo>Tests located at "${testRunDir}/pbetests.swf"</echo>
        <echo />

        <!-- Copy our application template and include the path to the swf file and any other settings -->
        <copy file="${buildFilesDir}/application.template.xml" tofile="${testRunDir}/application.xml" failOnError="true" overwrite="true" verbose="true">
            <filterset>
                <filter token="TESTSWF" value="pbetests.swf"/>
                <filter token="AIRVERSION" value="${airversion}"/>
            </filterset>
        </copy>

        <!-- Execute the AIR app which generates junit format xml files for each test suite. --> 
        <!-- This will fail after 30 seconds -->
        <exec executable="${adl}" failonerror="true" timeout="30000">
            <arg line="-nodebug"/>
            <arg line="&quot;${testRunDir}/application.xml&quot;"/>
            <arg line="--"/>
            <arg line="&quot;${testRunDir}/testoutput&quot;"/>
            <arg line="true"/>
        </exec>

    </target>

</project>
